buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.

version = "1.15.2-0.8.2"
group = "com.mrcrayfish" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "controllable"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    mappings channel: 'snapshot', version: '20200122-1.15.1'
    
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                controllable {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                controllable {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/')
            mods {
                controllable {
                    source sourceSets.main
                }
            }
        }
    }
}

configurations {
    libraries
    compile.extendsFrom libraries
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.15.2-31.0.14'
}

repositories {
    jcenter()
}

dependencies {
    libraries "uk.co.electronstudio.sdl2gdx:sdl2gdx:1.0.+"
    compileOnly 'org.projectlombok:lombok:1.18.12'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'
}

jar {
    manifest {
        attributes([
            "Specification-Title": "Controllable",
            "Specification-Vendor": "MrCrayfish",
            "Specification-Version": "1",
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"MrCrayfish",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "Signing-Fingerprint": project.hasProperty('fingerprint') ? project.property('fingerprint') : 'unsigned'
        ])
    }
    from {
        configurations.libraries.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

Properties keyStoreProperties = new Properties()
File file = new File("C:\\dev\\keystore.properties")
if(file.exists()) {
    InputStream ins = new FileInputStream(file)
    keyStoreProperties.load(ins)
    ins.close()
}

import net.minecraftforge.gradle.common.task.SignJar

task signJar(type: SignJar, dependsOn: jar) {
    onlyIf {
        keyStoreProperties.containsKey("keyStore")
    }
    keyStore = keyStoreProperties.get('keyStore')
    alias = keyStoreProperties.get('alias')
    storePass = keyStoreProperties.get('keyPass')
    keyPass = keyStoreProperties.get('storePass')
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}
build.dependsOn signJar
